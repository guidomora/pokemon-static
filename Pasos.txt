1) instalamos next UI
2) encerramos la app (_app.tsx) en el Provider de next ui
3)creamos la carpeta themes, el archivo darkTheme y pegamos el codio de next ui
4) creamos la carpeta components, dentro la carpeta layout, pokemon y ui
5) dentro de layout creamos el archivo, insertamos el codigo
    - este va a envolver el index
    - recibe children por lo tanto tenemos que especificarlo con tsx
6) en la carpeta ui creamos el archivo NavBar
7) agregamos codigo: usamos el componente Text de next ui, Image de next
8) en next.config agregamos unas lineas de codigo que van a permitir que
   podamos traer imagenes que no estan en nuestros archivo y vienen de paginas
   que usan static generation. En ese codigo agregamos la url del sitio para que 
   permita traerla 

Carga de pokemons:

9) Vamos a cargar de forma estatica los pokemons. Creamos la carpeta api, dentro el archivo pokeApi.ts
10) instalamos axios y creamos el codigo para traer los datos de la api
11) en el index de pages usamos el componente de next getStaticProps lo creamos con el snippet
12) hacemos la peticion get 
13) copiamos toda la respuesta que teniamos en postman pegando la url entera de la pokeapi 
14) creamos la carpeta interfaces y dentro el archivo pokemon-list 
15) usamos quicktype ctrl + shift + p | escribimos el nombre que querramos de la interface
16) nos devuelve una interface
17) hacemos unos cambios en la interface
18) en el index creamos una constante pokemons dentro del getStaticProps, donde indicamos
    que la interface SmallPokemon y mapeamos la data de la api
19) esta constante la pasamos como props
20) en este mismo archivo index creamos otra interface llamada Props que va a tener como propiedad
    pokemons que va a ser igual a SmallPokemon
21) En el jsx mapeamos pokemons que viene como props para obtener los datos
22) Creamos las cards con la info de los pokemones con Next UI
23) Las cards las pasamos a otro componente pokemon > PokemonCard asi quedaba limpio el index

Argumentos por URL:

24) En la carpeta pages > pokemon > [id].tsx  el nombre va asi porque va a ser dinamico
25) En PokemonCard usamos router y una funcion que manda el id por query
26) En el archivo [id] vamos a tener que usar getStaticPaths y getStaticProps
27) Generando las pags: creamos un array de 1 a 500, y lo pasamos al path y a los params
    modificamos un poco la estructura debido al mapeo del array, la original esta comentada
    o se puede ver con el snippet de getStaticPaths
28) Creamos una interface nueva en interfaces > pokemon-full.ts con el quicktype
29) usamos esa interface en la constante que hace la peticion get y en la interface creada arriba 
    de todo para indecar de que tipo son las props que va a recibir el componente
30) en la peticion get cambiamos el link por el de un pokemon solo y le pasamos el nuevo id
    video 19.
31) Le damos estilo a toda la pag
32) Creamos la seccion de favoritos: pages > favorites > index.tsx
---------------------------------------------------------------------------------------------

Segunda etapa:

1) utils > localFavorites.ts creamos una funcion onToggleFavorite que se va a encargar de 
    subir los id al localStorage
2) importamos esa funcion y la incluimos en la funcion que va en el boton de onclick
   y le pasamos el id
3) dentro de localFavorites creamos existPokemonInFavorites, una funcion que se va a encargar de 
    devolvernos un booleano si el id se encuentra en el localStorage
4) en [id] usamos un useState y le pasamos esa funcion como estado inicial
5) en existPokemonInFavorites creamos un condicional que si el proceso se genera del
    lado del servidor de false para que no genere errores con el backend de next
6) en [id] a la funcion onToggleFavorite le agregamos el seter para que al dar click
    cambie el valor del estado por el contrario


7) Pantalla de favoritos: en ui > NoFavorites creamos todo el maquetado y sus estilos
8) importamos NoFavorites a favorites > index para reducir el codigo
9) En local favorites creamos una funcion pokemons que solo va a traer pokemones del
   localStorage, no verificamos si se usa del lado en el servidor en este caso
10) en favorites > id creamos un estado, usamos un useEffect y le al seter le 
    pasamos la funcion que retorna los pokemones del localStorage. No verificamos que se use
    en el lado del servidor ya que estamos unsando un useEffect (es otra de las formas de verificar)


11) Listado de favoritos: pokemon > FavoriteCardPokemon.tsx va a tener cada 
    card de cada pokemon 
12) pokemon > FavoritePokemons.tsx va a tener el listado de los pokemones en favoritos
13) en favorites > index creamos un condicional que muestra NoFavorites o FavoritePokemons
14) Link: creamos una constante llamada router, esta l;lama al useRouter
15) Creamos una funcion donde pusheamos el router al link con el id del pokemon
    y llamamos a esa funcion en un onclick
16) Canva confetti: Como esta libreria no esta para TS al querer importarla nos sale un
    error con una sugerencia para que ejecutemos npm install --save canvas-confetti
    para instalarlo como una dependencia de desarrollo
17) importamos la libreria y la usamos en la PokemonPage


18) Pokemon por nombre: pages > name > [name].tsx
19) Es identico al componente de [id].tsx y ahora en la url si ponemos /name/nombre del pokemon
    nos lleva a la card del pokemon


20) Optimizar la data necesaria del pokemon: en pages > name > [name].tsx creamos una funcion
    que solo trae los datos que vamos a utilizar. Aplicamos la misma funcion a [id].tsx
    Esto a la hora de hacer el build reduce un monton el peso y tiempos de carga
21)
22)
23)